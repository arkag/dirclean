name: Build and Version

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  version:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required to create a release and upload assets

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for GitVersion to work correctly

      # Set up GitVersion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'  # Use GitVersion 5.x

      # Calculate the next version
      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true  # Use a GitVersion configuration file (optional)

      # Create a new Git tag
      - name: Create Git tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ steps.gitversion.outputs.semVer }}
          git push origin ${{ steps.gitversion.outputs.semVer }}

  build:
    runs-on: ubuntu-latest
    needs: version  # Ensure the version job runs first

    permissions:
      contents: write  # Required to create a release and upload assets

    strategy:
      matrix:
        platform:
          - os: darwin
            arch: arm64
            binary_name: dirclean-darwin-arm64
          - os: linux
            arch: amd64
            binary_name: dirclean-linux-amd64

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'  # Specify the Go version you want to use

      # Build the Go program for the target platform
      - name: Build
        run: |
          GOOS=${{ matrix.platform.os }} GOARCH=${{ matrix.platform.arch }} go build -o ${{ matrix.platform.binary_name }} ./dirclean.go

      # Create a release
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the default GITHUB_TOKEN
        with:
          tag_name: ${{ needs.version.outputs.semVer }}  # Use the version from GitVersion
          release_name: Release ${{ needs.version.outputs.semVer }}
          draft: false
          prerelease: false

      # Upload the compiled binary to the release
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the default GITHUB_TOKEN
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL from the create-release step
          asset_path: ${{ matrix.platform.binary_name }}             # Path to the binary
          asset_name: ${{ matrix.platform.binary_name }}             # Name of the asset
          asset_content_type: application/octet-stream              # Content type for binary files