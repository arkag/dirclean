name: Build, Test, and Release

on:
  push:
    branches:
      - main

env:
  BINARY_NAME: dirclean

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '5.x'

      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.1.11
        with:
          useConfigFile: false

      - name: Create Git tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ steps.gitversion.outputs.semVer }}
          git push origin ${{ steps.gitversion.outputs.semVer }}

    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'

      - name: Run tests
        run: go test ./...

  build:
    runs-on: ubuntu-latest
    needs: [version]  # Removed test dependency
    permissions:
      contents: write
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'

      - name: Build
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags "-X main.appVersion=${{ needs.version.outputs.semVer }} -X main.appOsArch=${{ matrix.os }}/${{ matrix.arch }}" -o ${{ env.BINARY_NAME }}${{ matrix.os == 'windows' && '.exe' || '' }} ./main.go

      - name: Create tarball
        run: |
          tar -czvf ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz ${{ env.BINARY_NAME }}${{ matrix.os == 'windows' && '.exe' || '' }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            ${{ env.BINARY_NAME }}${{ matrix.os == 'windows' && '.exe' || '' }}
            ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  package:
    needs: [version, build, test]
    strategy:
      matrix:
        include:
          - type: redhat
            container: fedora:latest
            cmd: |
              dnf install -y rpm-build git
              ./package-redhat.sh
          - type: debian
            container: ubuntu:latest
            cmd: |
              apt-get update
              apt-get install -y debhelper git
              ./package-debian.sh
          - type: arch
            container: archlinux:latest
            cmd: |
              pacman -Syu --noconfirm base-devel git
              ./package-arch.sh
    runs-on: ubuntu-latest
    container: 
      image: ${{ matrix.container }}
      env:
        BINARY_NAME: ${{ env.BINARY_NAME }}
      options: --user root
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set file permissions
        run: |
          chmod -R 755 .
          chown -R root:root .
          ls -la

      - name: Download Linux AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-linux-amd64
          path: .

      - name: Set binary permissions
        run: chmod +x ${BINARY_NAME}

      - name: Package for ${{ matrix.type }}
        run: ${{ matrix.cmd }}

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.type }}
          path: |
            *.rpm
            *.deb
            *.pkg.tar.zst

  collect-packages:
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages
          pattern: '${{ env.BINARY_NAME }}-*'
          merge-multiple: true

      - name: Upload combined packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: packages/*

  release:
    runs-on: ubuntu-latest
    needs: [version, build, collect-packages]  # Updated dependency
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-artifacts
          pattern: '${{ env.BINARY_NAME }}-*'
          exclude: |
            **/*-redhat
            **/*-debian
            **/*-arch
          merge-multiple: true

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          path: package-artifacts
          name: linux-packages

      - name: Generate checksum file
        run: |
          cd build-artifacts
          find . -type f -name "${{ env.BINARY_NAME }}-*.tar.gz" -exec sha256sum {} \; > checksums.txt

      - name: Create GitHub Release
        run: |
          gh release create ${{ needs.version.outputs.semVer }} \
            --title "Release ${{ needs.version.outputs.semVer }}" \
            --notes "Release ${{ needs.version.outputs.semVer }}" \
            --draft=false \
            --prerelease=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        run: |
          for asset in build-artifacts/${{ env.BINARY_NAME }}-*.tar.gz build-artifacts/checksums.txt; do
            gh release upload ${{ needs.version.outputs.semVer }} "$asset"
          done
          for asset in package-artifacts/*; do
            gh release upload ${{ needs.version.outputs.semVer }} "$asset"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
