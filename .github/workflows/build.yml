name: Build, Test, and Release

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

env:
  BINARY_NAME: dirclean  # Change this to your desired binary name

jobs:
  version:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required to create a release and upload assets

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for GitVersion to work correctly

      # Set up GitVersion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '5.x'

      # Calculate the next version
      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.1.11
        with:
          useConfigFile: false  # Use a GitVersion configuration file (optional)

      # Create a new Git tag
      - name: Create Git tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ steps.gitversion.outputs.semVer }}
          git push origin ${{ steps.gitversion.outputs.semVer }}

    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}  # Output the semVer for use in the release job

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'

      # Run tests
      - name: Run tests
        run: go test ./...

  build:
    runs-on: ubuntu-latest
    needs: version  # Ensure the version job runs first

    permissions:
      contents: write  # Required to create a release and upload assets

    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'

      # Build the Go program for the target platform with the version embedded
      - name: Build
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags "-X main.appVersion=${{ needs.version.outputs.semVer }} -X main.appOsArch=${{ matrix.os }}/${{ matrix.arch }}" -o ${{ env.BINARY_NAME }}${{ matrix.os == 'windows' && '.exe' || '' }} ./main.go

      # Create a tarball for the binary
      - name: Create tarball
        run: |
          tar -czvf ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz ${{ env.BINARY_NAME }}${{ matrix.os == 'windows' && '.exe' || '' }}

      # Upload the tarball as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          path: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  package:
    runs-on: ubuntu-latest
    needs: version  # Ensure the version job runs first

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'

      # Build the Go program for Linux
      - name: Build for Linux
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.appVersion=${{ needs.version.outputs.semVer }} -X main.appOsArch=linux/amd64" -o ${{ env.BINARY_NAME }} ./main.go

      # Package for RedHat
      - name: Package for RedHat
        run: |
          sudo yum install -y rpm-build
          ./package-redhat.sh

      # Package for Debian
      - name: Package for Debian
        run: |
          sudo apt-get install -y debhelper
          ./package-debian.sh

      # Package for Arch
      - name: Package for Arch
        run: |
          sudo pacman -S --noconfirm base-devel
          ./package-arch.sh

      # Upload packages as artifacts
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            *.rpm
            *.deb
            *.pkg.tar.zst

  release:
    runs-on: ubuntu-latest
    needs: [version, build, package]  # Ensure version, build, and package jobs run first

    permissions:
      contents: write  # Required to create a release and upload assets

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history

      # Download all artifacts from the build job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-artifacts
          pattern: '${{ env.BINARY_NAME }}-*.tar.gz'  # Ensure only the tarballs are downloaded
          merge-multiple: true   # Merge artifacts into a single directory

      # Download all artifacts from the package job
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          path: package-artifacts
          pattern: 'linux-packages/*'  # Ensure only the Linux packages are downloaded
          merge-multiple: true   # Merge artifacts into a single directory

      # Generate a checksum file for all tarballs
      - name: Generate checksum file
        run: |
          cd build-artifacts
          shasum -a 256 ${{ env.BINARY_NAME }}-*.tar.gz > checksums.txt

      # Create a GitHub release using the GitHub CLI (gh)
      - name: Create GitHub Release
        run: |
          gh release create ${{ needs.version.outputs.semVer }} \
            --title "Release ${{ needs.version.outputs.semVer }}" \
            --notes "Release ${{ needs.version.outputs.semVer }}" \
            --draft=false \
            --prerelease=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload tarballs, packages, and checksum file to the release using the GitHub CLI (gh)
      - name: Upload Release Assets
        run: |
          for asset in build-artifacts/*; do
            gh release upload ${{ needs.version.outputs.semVer }} "$asset"
          done
          for asset in package-artifacts/*; do
            gh release upload ${{ needs.version.outputs.semVer }} "$asset"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}