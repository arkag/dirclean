name: Build and Release

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

env:
  BINARY_NAME: dirclean  # Change this to your desired binary name

jobs:
  version:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required to create a release and upload assets

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for GitVersion to work correctly

      # Set up GitVersion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '5.x'

      # Calculate the next version
      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.1.11
        with:
          useConfigFile: false  # Use a GitVersion configuration file (optional)

      # Create a new Git tag
      - name: Create Git tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ steps.gitversion.outputs.semVer }}
          git push origin ${{ steps.gitversion.outputs.semVer }}

    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}  # Output the semVer for use in the release job

  build:
    runs-on: ubuntu-latest
    needs: version  # Ensure the version job runs first

    permissions:
      contents: write  # Required to create a release and upload assets

    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - arch: arm64
            os: windows

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'

      # Build the Go program for the target platform with the version embedded
      - name: Build
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags "-X main.appVersion=${{ needs.version.outputs.semVer }} -X main.appOsArch=${{ matrix.os }}/${{ matrix.arch }}" -o ${{ env.BINARY_NAME }}${{ matrix.os == 'Windows' && '.exe' || '' }} ./dirclean.go

      # Create a tarball for the binary
      - name: Create tarball
        run: |
          tar -czvf ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz ${{ env.BINARY_NAME }}${{ matrix.os == 'Windows' && '.exe' || '' }}

      # Upload the tarball as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          path: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: [version, build]  # Ensure version and build jobs run first

    permissions:
      contents: write  # Required to create a release and upload assets

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history

      # Download all artifacts from the build job
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '${{ env.BINARY_NAME }}-*.tar.gz'  # Ensure only the tarballs are downloaded
          merge-multiple: true   # Merge artifacts into a single directory

      # Generate a checksum file for all tarballs
      - name: Generate checksum file
        run: |
          cd artifacts
          shasum -a 256 ${{ env.BINARY_NAME }}-*.tar.gz > checksums.txt

      # Create a GitHub release using the GitHub CLI (gh)
      - name: Create GitHub Release
        run: |
          gh release create ${{ needs.version.outputs.semVer }} \
            --title "Release ${{ needs.version.outputs.semVer }}" \
            --notes "Release ${{ needs.version.outputs.semVer }}" \
            --draft=false \
            --prerelease=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload tarballs and checksum file to the release using the GitHub CLI (gh)
      - name: Upload Release Assets
        run: |
          for asset in artifacts/*; do
            gh release upload ${{ needs.version.outputs.semVer }} "$asset"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}